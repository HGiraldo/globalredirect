<?php
// $Id$

/**
 * @file
 * The Global Redirect module redirects for all paths which have aliases but
 * are not using the aliases which reduces the risk of duplicate content.
 */

/**
 * Implements hook_help().
 */
function globalredirect_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('This module will do a 301 redirect for all nodes which have an alias but are not using that alias.');
  }
}

/**
 * Implements hook_init().
 */
function globalredirect_init() {
  global $language;

  /**
   * Get the settings.
   */
  $settings = _globalredirect_get_settings();

  // If GlobalRedirect is inactive (for any of the reasons listed in
  // _globalredirect_is_active()) then skip the rest of the function.
  if (!_globalredirect_is_active($settings)) return FALSE;


  // If menu checking is enabled, do the check. Note: Feature disabled by default.
  if ($settings['menu_check']) {
    // Check the access on the current path, return FALSE if access not
    // allowed. This stops redirection for paths without access permission.
    $item = menu_get_item();
    if (!$item['access']) return FALSE;
  }


  // Store the destination from the $_REQUEST as it breaks things if we leave
  // it in - restore it at the end...
  if (isset($_REQUEST['destination'])) {
    $destination = $_REQUEST['destination'];
    unset($_REQUEST['destination']);
  }


  // Get the Query String (minus the 'q'). If none set, set to NULL
  $query_string = drupal_query_string_encode($_GET, array('q'));
  if (empty($query_string)) {
    $query_string = NULL;
  }


  // Establish the language prefix that should be used, ie. the one that
  // drupal_goto() would use
  $options = array(
    'fragment' => '',
    'query' => '',
    'absolute' => FALSE,
    'alias' => FALSE,
    'prefix' => '',
    'external' => FALSE,
  );
  if (function_exists('language_url_rewrite')) {
    // Note 1 : the language_url_rewrite() takes path (by reference) as the
    //          first argument but does not use it at all
    // Note 2 : We use $_REQUEST['q'] here as we want the path in an untouched
    //          form ($_GET['q] gets modified by core)
    $path = isset($_REQUEST['q']) ? $_REQUEST['q'] : '';
    language_url_rewrite($path, $options);
  }
  $prefix = rtrim($options['prefix'], '/');


  // Do a check if this is a front page
  if (drupal_is_front_page()) {
    // Redirect if the current request does not refer to the front page in the
    // configured fashion (with or without a prefix)
    if (isset($_REQUEST['q']) && $_REQUEST['q'] != $prefix) {
      drupal_goto('', $query_string, NULL, 301);
    }
    elseif ($settings['nonclean_to_clean'] &&
            ((bool)variable_get('clean_url', 0)) &&
            (strpos(request_uri(), '?q=') || strpos(request_uri(), 'index.php'))) {
      drupal_goto('', $query_string, NULL, 301);
    }
    // If we've got to this point then we're on a front page with a VALID
    // request path (such as a language-prefix front page such as '/de')
    return;
  }


  // Trim any trailing slash off the end (eg, 'node/1/' to 'node/1')
  $request = $settings['deslash'] ? trim($_GET['q'], '/') : $_GET['q'];


  // Optional stripping of "/0". Disabled by default.
  switch ($settings['trailing_zero']) {
    case 2 :
      // If 'taxonomy/term/*' only. If not, break out.
      if (drupal_substr($request, 0, 14) != 'taxonomy/term/') {
        break;
      }
      // If it is, fall through to general trailing zero method
    case 1 :
      // If last 2 characters of URL are /0 then trim them off
      if (drupal_substr($request, -2) == '/0') {
        $request = rtrim($request, '/0');
      }
  }


  // Find an alias (if any) for the request
  $langcode = isset($options['language']->language) ? $options['language']->language : '';
  $alias = drupal_get_path_alias($request, $langcode);
  if (function_exists('custom_url_rewrite_outbound')) {
    // Modules may alter outbound links by reference.
    custom_url_rewrite_outbound($alias, $options, $request);
  }
  if ($prefix && $alias) {
    $prefix .= '/';
  }


  // Alias case sensitivity check. If there is an alias from the previous
  // lookup, do a query to test for case.
  if ($alias && $settings['case_sensitive_urls']) {
    $alias_sensitive = db_result(db_query("SELECT dst FROM {url_alias} WHERE dst = '%s' AND language = '%s'", $alias, $langcode));
    if ($alias_sensitive && $alias != $alias_sensitive) {
      // There is a match and there is a difference in case.
      $alias = $alias_sensitive;
    }
  }


  // Compare the request to the alias. This also works as a 'deslashing'
  // agent. If we have a language prefix then prefix the alias
  if ($_REQUEST['q'] != $prefix . $alias) {
    // If it's not just a slash or user has deslash on, redirect
    if (str_replace($prefix . $alias, '', $_REQUEST['q']) != '/' || $settings['deslash']) {
      drupal_goto($alias, $query_string, NULL, 301);
    }
  }


  // If no alias was returned, the final check is to direct non-clean to
  // clean - if clean is enabled
  if ($settings['nonclean_to_clean'] && ((bool)variable_get('clean_url', 0)) && strpos(request_uri(), '?q=')) {
    drupal_goto($request, $query_string, NULL, 301);
  }


  // Restore the destination from earlier so its available in other places.
  if (isset($destination)) $_REQUEST['destination'] = $destination;
}

/**
 * Implements hook_menu().
 */
function globalredirect_menu() {
  $items['admin/settings/globalredirect'] = array(
    'title' => 'Global Redirect',
    'description' => 'Chose which features you would like enabled for Global Redirect',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('globalredirect_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'globalredirect.admin.inc',
  );

  return $items;
}

/**
 * Drupal 6 backport of drupal_is_cli().
 */
function globalredirect_is_cli() {
  return (!isset($_SERVER['SERVER_SOFTWARE']) && (PHP_SAPI == 'cli' || (is_numeric($_SERVER['argc']) && $_SERVER['argc'] > 0)));
}


/**
 * Internal function to determine if GlobalRedirect is active.
 * Several rules have to be checked prior to execution, such as an empty post array,
 * the site must be online and we cannot be running in CLI mode (eg Drush).
 */
function _globalredirect_is_active($settings) {
  /**
   * We need to do a test to make sure we only clean up URL's for the main
   * request. This stops modules such as the Ad Module which had its own script
   * in its folder doing a bootstrap which invoked hook_init and caused some
   * banners to get "cleaned up"
   *
   * @see http://drupal.org/node/205810
   * @see http://drupal.org/node/278615
   */
  if ($_SERVER['SCRIPT_NAME'] != $GLOBALS['base_path'] .'index.php') return FALSE;


  /**
   * If this is a command line request (Drush, etc), skip processing.
   */
  if (globalredirect_is_cli()) {
    return FALSE;
  }


  /**
   * Check if the request is an attempted url mask
   */
  if (strpos(request_uri(), '://') !== FALSE) {
    return FALSE;
  }


  /**
   * If the site is in offline mode there is little point doing any of this as
   * you might end up redirecting to a 503.
   */
  if (variable_get('site_offline', 0) == 1) return FALSE;


  /**
   * If there is something posted, GlobalRedirect is not active
   */
  if (!empty($_POST)) return FALSE;


  /**
   * If drupal_get_path_alisa isn't preset, GlobalRedirect is not active
   */
  if (!function_exists('drupal_get_path_alias')) return FALSE;


  /**
   * If menu_check is enabled AND the menu_get_item function is missing, GlobalRedirect is disabled
   */
  if ($settings['menu_check'] && !function_exists('menu_get_item')) return FALSE;


  /**
   * We seem to have passed all the tests - let say we're active
   */
  return TRUE;
}


/**
 * Return the settings with any defaults mapped over the top
 */
function _globalredirect_get_settings($default_only = FALSE) {
  $defaults = array(
    'deslash' => 1,
    'nonclean_to_clean' => 1,
    'trailing_zero' => 0,
    'menu_check' => 0,
    'case_sensitive_urls' => 1,
  );

  if ($default_only) {
    return $defaults;
  }

  return variable_get('globalredirect_settings', array()) + $defaults;
}
