<?php
// $Id$

define('ERROR_MESSAGE',     'ERROR<br />Expected Path: !expected_path<br />Expected Status Code: !expected_status<br />Location: !location<br />Status: !status');
define('SUCCESS_MESSAGE', 'SUCCESS<br />Expected Path: !expected_path<br />Expected Status Code: !expected_status<br />Location: !location<br />Status: !status');

/**
 * @file
 * Global Redirect functionality tests
 */

class GlobalRedirectTestCase extends DrupalWebTestCase {


  function setUp() {
    $modules = array_merge(func_get_args(), array('path', 'globalredirect'));
    call_user_func_array(array($this, 'parent::setUp'), $modules);

    // Create a user
    $user = $this->drupalCreateUser(array(
      'access content',
      'create page content',
      'create url aliases',
    ));
    $this->drupalLogin($user);

    // Create a dummy node
    $node = array(
      'type' => 'page',
      'title' => 'Test Page Node',
      'path' => 'test-node',
    );

    // Save the node
    $node = $this->drupalCreateNode($node);

    // Create an alias for the create story path - this is used in the "redirect with permissions testing" test.
    path_set_alias('node/add/story', 'add-node-story');
  }

  protected function _globalredirect_batch_test() {
    // Array of request => "array of expected data" pairs.
    $test_paths = array(
      // "" is the frontpage. Should NOT redirect. Need to use <front> as keys cannot be blank --- Test for normal requests
      '<front>'        => array('return-code' => 200),

      // "node" is the default frontpage. Should redirect to base path. --- Test for frontpage redirect
      'node'           => array('return-code' => 301),
      
      // "node/1" has been defined above as having an alias ("test-node"). Should 301 redirect to the alias. --- Test for source path request on aliased path
      'node/1'         => array('return-code' => 301),

      // "node/add/story" has an alias, however the redirect depends on the menu_check setting --- Test for access request to secured url
      'node/add/story' => array('return-code' => variable_get('globalredirect_menu_check', GLOBALREDIRECT_FEATURE_DISABLED) ? 301 : 403),
    );

    // Foreach of the above, lets check they redirect correctly
    foreach ($test_paths as $request => $expecting) {
      // If the request is for the frontpage, just set the string to blank (we cant have a blank array key)
      if ($request == '<front>') {
        $request == '';
      }

      // Display a message tellingthe user what we're testing
      $this->pass(t('Requesting: !path', array('!path' => url($request, array('alias' => TRUE, 'absolute' => TRUE)))));

      // Do a HEAD request (don't care about the body). The alias=>TRUE is to tell Drupal not to lookup the alias - this is a raw request.
      $this->drupalHead($request, array('alias' => TRUE));

      // Grab the headers from the request
      $headers = $this->drupalGetHeaders(TRUE);

      // Build a nice array of results
      $result = array(
        '!expected_path' => ($expecting['return-code']) != 301 ? 'N/A' : url(($request == variable_get('site_frontpage', 'node') ? '<front>' : $request), array('absolute' => TRUE)),
        '!expected_status' => $expecting['return-code'],
        '!location' => isset($headers[0]['location']) ? $headers[0]['location'] : 'N/A',
        '!status' => $headers[0][':status'],
      );


      // First test - is the status as expected? (Note: The expected status must be cast to string for strpos to work)
      if (strpos($result['!status'], (string)$result['!expected_status']) !== FALSE) {
        // Ok, we have a status and the status contains the appropriate response code (eg, 200, 301, 403 or 404).

        // Next test (if expected return code is 301) - is the location set, and is it as expected?
        if ($result['!expected_status'] == 301 && $result['!location'] == $result['!expected_path']) {
          // We have redirect and ended up in the right place - a PASS!!!
          $this->pass(t(SUCCESS_MESSAGE, $result), 'GlobalRedirect');
        }
        elseif ($result['!expected_status'] != 301) {
          // We weren't supposed to redirect - this is good!
          $this->pass(t(SUCCESS_MESSAGE, $result), 'GlobalRedirect');
        }
        else {
          // In this case either the return-code or the returned location is unexpected
          $this->fail(t(ERROR_MESSAGE, $result), 'GlobalRedirect');
        }
      }
      else {
        // The status either wasn't present or was not as expected
        $this->fail(t(ERROR_MESSAGE, $result), 'GlobalRedirect');
      }
    }
  }
}


class GlobalRedirectTestCaseDefault extends GlobalRedirectTestCase {
  function getInfo() {
    return array(
      'name' => '1. Global Redirect - Default Settings',
      'description' => 'Ensure that Global Redirect functions correctly',
      'group' => 'Global Redirect',
    );
  }
  function testGlobalRedirect() {
    $this->_globalredirect_batch_test();
  }
}


class GlobalRedirectTestCaseConfigAlpha extends GlobalRedirectTestCase {
  function getInfo() {
    return array(
      'name' => '2. Global Redirect - Config Alpha',
      'description' => 'Ensure that Global Redirect functions correctly',
      'group' => 'Global Redirect',
    );
  }
  function testGlobalRedirect() {
    variable_set('globalredirect_menu_check', GLOBALREDIRECT_MENU_CHECK_ENABLED);
    $this->_globalredirect_batch_test();
  }
}
